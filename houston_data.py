import pandas as pd
import numpy as np
import json
import pdb

csvIn = 'coh_email_metadata_1Q17.csv'
dataframe = pd.read_csv(csvIn, header=0)

# function to look only at the email
def splitEmails(x):
    if isinstance(x, str):
        emailList = [ item[item.find('<')+1:item.find('>')] for item in x.split(';')]
        return emailList

# https://stackoverflow.com/questions/38203352/expand-pandas-dataframe-column-into-multiple-rows
# function for expanding the "To" column data to multiple rows
def splitRecipients(df, colName):

    dataframe[colName] = dataframe[colName].apply(splitEmails)

    lens = [len(emails) if emails else 0 for emails in df[colName]]
    senderList = np.repeat(df['Sender'].values, lens)
    recipientList = []

    for recipientCell in df[colName].values:
        if recipientCell:
            recipientList.extend(recipientCell)

    return pd.DataFrame( {"Sender": senderList,
                            colName: recipientList})

# Extract sender email
print("Extracting sender email")
dataframe['Sender'] = dataframe.Sender.str.extract(r'\<(.*?)\>', expand=False)

# Clean up the sender columns
# if sender does not have email address, discard info
dataframe = dataframe[pd.notnull(dataframe['Sender'])]
dataframe = dataframe.apply(lambda x: x.astype(str).str.lower())

# Create multiple rows for recipients
print("Expanding recipient (to) column")
toDF = splitRecipients(dataframe, 'To')

# Get the number of emails a unique sender sends to a unique receiver
print("Counting emails")
toDF['Count'] = 1
emailCount = pd.DataFrame(toDF.groupby(['Sender', 'To'])['Count'].sum())
sortedEmailCount = emailCount.sort_values(['Count'], ascending=False)
sortedEmailCount.to_csv('email_count.csv')

# Get the email senders who do not receive any replies -- these are the automated messages
print("Getting machine generated email addresses")
emailCount = pd.read_csv('email_count.csv', header=0)
mask = (emailCount['Sender'] + emailCount['To']).isin(emailCount['To'] + emailCount['Sender'])
autoGenerated = emailCount[~mask]
autoGenerated = autoGenerated.groupby(['Sender']).count()
autoGenerated = autoGenerated.sort_values(['Count'], ascending=False)
automatedCSV = autoGenerated.drop(['To', 'Count'], axis=1)
automatedCSV.to_csv('automated.csv')

# Every email address that receives a reply probably can be human
probablyHuman = emailCount[mask]

# Match up each column with number of emails that receivers send to senders
print("Looking at probable humans")
atob = probablyHuman['Sender'] + probablyHuman['To']
atobDF = pd.DataFrame({'Email Key': atob,
                    'Sender': probablyHuman['Sender'],
                    'To': probablyHuman['To'],
                    'Count': probablyHuman['Count']})

btoa = probablyHuman['To'] + probablyHuman['Sender']
btoaDF = pd.DataFrame({'Email Key': btoa,
                    'Count': probablyHuman['Count']})

atobDF = atobDF.sort_values('Email Key')
btoaDF = btoaDF.sort_values('Email Key')

btoaCount = btoaDF['Count'].tolist()
atobDF['Received Emails'] = btoaCount
atobDF = atobDF.rename(index=str, columns={"Count": "Sent Emails"})
atobDF = atobDF.drop('Email Key', axis=1)

# Get ratio: (# sent emails)/(# total emails)
atobDF['Ratio'] = atobDF['Sent Emails'] / (atobDF['Sent Emails'] + atobDF['Received Emails'])
probablyAuto = atobDF[atobDF['Ratio'] >= 0.99]

human = atobDF[atobDF['Ratio'] < 0.99]

# following http://www.austintaylor.io/d3/python/pandas/2016/02/01/create-d3-chart-python-force-directed/
# write things out to json to graph it
print("Writing to JSON")
human = human[(human['Sent Emails'] + human['Received Emails']) > 400]
humanCSV = human
humanCSV.to_csv('graph_data.csv')
groupedList = human.groupby(['Sender', 'To']).size().reset_index()
groupOfEmails = groupedList['Sender'].append(groupedList['To'])
uniqueEmails = pd.Index((groupOfEmails.reset_index(drop=True)).unique())

tempLinksList = list(human.apply(lambda row: {"source": row['Sender'], "target": row['To'], "value": row['Sent Emails']}, axis=1))
linksList = []
for link in tempLinksList:
    record = {"value":link['value'], "source":uniqueEmails.get_loc(link['source']),
    "target": uniqueEmails.get_loc(link['target'])}
    linksList.append(record)

nodesList = []
counter = 0
domainDict = {}
for email in uniqueEmails:
    domain = (email.split('@'))[-1]
    group = 0
    if domain in domainDict:
        group = domainDict[domain]
    else:
        counter += 1
        domainDict[domain] = counter
        group = counter
    nodesList.append({"id": email, "group": group})

jsonList = {"nodes": nodesList, "links": linksList}
jsonOut = open('houstoncommunity.json', 'w')
jsonOut.write(json.dumps(jsonList))
jsonOut.close()